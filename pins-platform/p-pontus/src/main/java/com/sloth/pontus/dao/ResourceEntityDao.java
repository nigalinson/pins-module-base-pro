package com.sloth.pontus.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sloth.pontus.entity.ResourceEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESOURCE_ENTITY".
*/
public class ResourceEntityDao extends AbstractDao<ResourceEntity, Long> {

    public static final String TABLENAME = "RESOURCE_ENTITY";

    /**
     * Properties of entity ResourceEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OriginUrl = new Property(1, String.class, "originUrl", false, "ORIGIN_URL");
        public final static Property LocalPath = new Property(2, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property Md5 = new Property(3, String.class, "md5", false, "MD5");
        public final static Property State = new Property(4, int.class, "state", false, "STATE");
        public final static Property Hotness = new Property(5, long.class, "hotness", false, "HOTNESS");
        public final static Property Group = new Property(6, String.class, "group", false, "RS_GROUP");
        public final static Property AdditionInfo = new Property(7, String.class, "additionInfo", false, "ADDITION_INFO");
        public final static Property UpdateTime = new Property(8, long.class, "updateTime", false, "UPDATE_TIME");
    }


    public ResourceEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ResourceEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESOURCE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"ORIGIN_URL\" TEXT UNIQUE ," + // 1: originUrl
                "\"LOCAL_PATH\" TEXT," + // 2: localPath
                "\"MD5\" TEXT," + // 3: md5
                "\"STATE\" INTEGER NOT NULL ," + // 4: state
                "\"HOTNESS\" INTEGER NOT NULL ," + // 5: hotness
                "\"RS_GROUP\" TEXT," + // 6: group
                "\"ADDITION_INFO\" TEXT," + // 7: additionInfo
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 8: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESOURCE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResourceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String originUrl = entity.getOriginUrl();
        if (originUrl != null) {
            stmt.bindString(2, originUrl);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(3, localPath);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(4, md5);
        }
        stmt.bindLong(5, entity.getState());
        stmt.bindLong(6, entity.getHotness());
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(7, group);
        }
 
        String additionInfo = entity.getAdditionInfo();
        if (additionInfo != null) {
            stmt.bindString(8, additionInfo);
        }
        stmt.bindLong(9, entity.getUpdateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResourceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String originUrl = entity.getOriginUrl();
        if (originUrl != null) {
            stmt.bindString(2, originUrl);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(3, localPath);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(4, md5);
        }
        stmt.bindLong(5, entity.getState());
        stmt.bindLong(6, entity.getHotness());
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(7, group);
        }
 
        String additionInfo = entity.getAdditionInfo();
        if (additionInfo != null) {
            stmt.bindString(8, additionInfo);
        }
        stmt.bindLong(9, entity.getUpdateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ResourceEntity readEntity(Cursor cursor, int offset) {
        ResourceEntity entity = new ResourceEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // originUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // localPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // md5
            cursor.getInt(offset + 4), // state
            cursor.getLong(offset + 5), // hotness
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // group
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // additionInfo
            cursor.getLong(offset + 8) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResourceEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOriginUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocalPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMd5(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setState(cursor.getInt(offset + 4));
        entity.setHotness(cursor.getLong(offset + 5));
        entity.setGroup(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdditionInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ResourceEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ResourceEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResourceEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
